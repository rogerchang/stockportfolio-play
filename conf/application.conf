# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
application.secret="kU>7m0:1SKt9y7L4d45Y=@dKgwOEqe9AblhQ1`yERaSI7]kEMJ0Xk?NM80rXDBA<"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

client_app {
    min.portfolio.stocks=2
    max.portfolio.stocks=10
    min.portfolio.shares=1
    max.portfolio.shares=1000
}

server_app {
   max.pricer.failures.count=5
   max.pricer.failures.within.time.in.seconds=60
   init.stock.manager.instances=10
   stock.data.retrieve.days.lookback=30
   stock.pricing.stream.num_streams=1000
   stock.pricing.stream.interval_milliseconds=1000
}

akka {
   actor {
       deployment {
           /ServiceLookup/StockDataRetrieverRouter {
               router = "random"
               nr-of-instances=10
           }
           /ServiceLookup/StockPricingActor {
               router = "random"
               nr-of-instances=10
           }
           /ServiceLookup/StockDirectoryRouterActor/router {
               router = "random"
               nr-of-instances=10
           }
           /StockPricingActor {
               router = "random"
               nr-of-instances=10
           }
       }
   }
}

akka {
  remote {
    loglevel = "DEBUG"
    log-sent-messages = on
    log-received-messages = on
  }
}
